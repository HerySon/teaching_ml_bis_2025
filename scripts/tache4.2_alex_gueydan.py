"""
Module pour l'analyse avanc√©e du dataset Open Food Facts.

Contient la classe `Tache42` permettant de :
- Analyser les corr√©lations entre les variables (Pearson, Spearman).
- Identifier les variables redondantes.
- Tester l'ind√©pendance entre variables cat√©gorielles avec le chi-carr√©.
- V√©rifier la normalit√© des distributions.
- Visualiser les relations entre variables via des heatmaps et des mod√®les polynomiaux.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from tache1_alex_gueydan import clean_data_set
from scipy.stats import chi2_contingency, shapiro


class Tache42:
    """
    Classe permettant d'analyser et de manipuler le dataset Open Food Facts.

    Cette classe propose plusieurs m√©thodes pour :
    - Visualiser les corr√©lations entre les variables.
    - Effectuer des tests statistiques pour examiner les relations entre variables.
    - Tester la normalit√© des variables.
    - Identifier les variables redondantes √† partir de leur corr√©lation.
    """

    def __init__(self):
        """
        Initialise la classe et charge un √©chantillon du dataset Open Food Facts.
        
        Attributs :
            df (DataFrame) : Un DataFrame contenant l'√©chantillon du dataset.
        """
        # Forcer pandas √† afficher toutes les colonnes et lignes
        pd.set_option("display.max_columns", None)
        pd.set_option("display.max_rows", None)

        # Chargement du dataset
        self.df = clean_data_set()

    def heatmap(self, threshold):
        """
        Affiche une heatmap des corr√©lations entre les variables du dataset,
        en filtrant celles qui sont sup√©rieures ou inf√©rieures au seuil sp√©cifi√©.

        Arguments :
            threshold (float) : Le seuil de corr√©lation pour filtrer les valeurs.
                                 Les corr√©lations sup√©rieures ou inf√©rieures √† ce seuil seront affich√©es.
        """
        # Calcul de la matrice de corr√©lation pour les colonnes num√©riques
        numeric_cols = self.df.select_dtypes(include=['int64', 'float64'])
        correlation_matrix = numeric_cols.corr().abs()

        # Appliquer le seuil pour filtrer les corr√©lations
        correlation_matrix = correlation_matrix[(correlation_matrix.abs() > threshold)]

        # Cr√©er la heatmap avec la matrice filtr√©e
        plt.figure(figsize=(10, 8))
        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, linewidths=0.5)
        plt.title(f'Correlation Heatmap with threshold {threshold}')
        plt.show()

    def spearman_correlation(self, threshold):
        """
        Calcule la corr√©lation de Spearman entre toutes les variables.
        Cette m√©thode permet de capturer des relations monotones non lin√©aires.

        Arguments :
            threshold (float) : Le seuil de corr√©lation pour filtrer les valeurs.
                                 Les corr√©lations sup√©rieures √† ce seuil seront affich√©es.

        Retour :
            spearman_corr (DataFrame) : La matrice de corr√©lation de Spearman.
        """
        # Calcul de la matrice de corr√©lation de Spearman
        numeric_cols = self.df.select_dtypes(include=['int64', 'float64'])
        correlation_matrix = numeric_cols.corr(method="spearman").abs()

        # Appliquer le seuil pour filtrer les corr√©lations
        correlation_matrix = correlation_matrix[(correlation_matrix.abs() > threshold) & (correlation_matrix != 1)]

        # Cr√©er la heatmap avec la matrice filtr√©e
        plt.figure(figsize=(10, 8))
        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, linewidths=0.5)
        plt.title(f'Correlation Heatmap with threshold {threshold}')
        plt.show()

    def chi2(self, colonne1, colonne2):
        """
        Effectue un test du chi-carr√© pour v√©rifier l'ind√©pendance entre deux variables cat√©gorielles.

        Arguments :
            colonne1 (str) : Le nom de la premi√®re variable.
            colonne2 (str) : Le nom de la seconde variable.
        """
        # Effectuer le test Chi-Carr√©
        chi2_stat, p_value, dof, expected = chi2_contingency(pd.crosstab(self.df[colonne1], self.df[colonne2]))

        if p_value < 0.05:
            print(f"Les variables {colonne1} et {colonne2} sont d√©pendantes.")
        else:
            print(f"Les variables {colonne1} et {colonne2} sont ind√©pendantes.")

    def find_highly_correlated_features(self, threshold):
        """
        Identifie les variables ayant une corr√©lation √©lev√©e et qui pourraient √™tre redondantes.

        Arguments :
            threshold (float) : Le seuil de corr√©lation pour identifier les variables redondantes.

        Retour :
            redundant_features (list) : Liste des variables redondantes.
        """
        numeric_cols = self.df.select_dtypes(include=['int64', 'float64'])
        corr_matrix = numeric_cols.corr().abs()

        # Cr√©er une version de la matrice sans la diagonale (corr√©lation avec soi-m√™me)
        np.fill_diagonal(corr_matrix.values, 0)

        # Identifier les colonnes ayant une corr√©lation sup√©rieure au seuil
        redundant_features = [
            column for column in corr_matrix.columns if any(corr_matrix[column] > threshold)
        ]

        print(f"Variables redondantes : {redundant_features}")

        return redundant_features

    def plot_polynomial_relationship(self, x_col, y_col, degree=2):
        """
        Affiche une relation polynomiale entre deux variables.

        Arguments :
            x_col (str) : Le nom de la colonne sur l'axe des abscisses.
            y_col (str) : Le nom de la colonne sur l'axe des ordonn√©es.
            degree (int) : Le degr√© du polyn√¥me √† ajuster.
        """
        plt.figure(figsize=(8, 5))
        sns.regplot(x=self.df[x_col], y=self.df[y_col], order=degree, scatter_kws={"s": 10}, line_kws={"color": "red"})
        plt.title(f"Relation polynomiale (degr√© {degree}) entre {x_col} et {y_col}")
        plt.show()

    def check_normality(self, column):
        """
        V√©rifie si une variable suit une distribution normale √† l'aide du test de Shapiro-Wilk.

        Arguments :
            column (str) : Le nom de la colonne √† tester.
        """
        stat, p_value = shapiro(self.df[column].dropna())
        if p_value > 0.05:
            print(f"La variable {column} suit une distribution normale.")
        else:
            print(f"La variable {column} ne suit pas une distribution normale.")



# üîπ Utilisation :
tache = Tache42()
#tache.heatmap(0.7)
# tache.spearman_correlation(0.3)
#tache.find_highly_correlated_features(0.7)
#tache.plot_polynomial_relationship("sodium_100g", "energy_100g", degree=2)
# tache.test_polynomial_features(["sodium_100g", "fat_100g"], "energy_100g", degree=2)
# tache.find_highly_correlated_features(threshold=0.9)
tache.decision_tree_analysis("energy-kcal_100g")
